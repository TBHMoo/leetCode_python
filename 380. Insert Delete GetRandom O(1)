380. Insert Delete GetRandom O(1)
https://leetcode.com/problems/insert-delete-getrandom-o1/

题目大意：实现一个数据结构，插入，删除都是O(1),有一个查询方法，随机返回其中一个元素复杂度也是O(1),并且每一个元素的返回概率相同

想法;
hashmap 插入删除，O(1),关键是怎么随机返回概率都相同，如果有个list 保存元素，随机取list中的某一个元素，hashMap key 记录值，value
记录 list中的下表，删除元素的时候，同时删除map,和list 中的元素。

class RandomizedSet {

    HashMap<Integer,Integer> map = new HashMap<>(16);
    List<Integer> list = new ArrayList<>();
    Random rnd = new Random();
    /** Initialize your data structure here. */
    public RandomizedSet() {

    }

    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if(map.containsKey(val)){
            return false;
        }
        map.put(val,list.size());
        list.add(val);
        return true;
    }

    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        if(!map.containsKey(val)){
            return false;
        }
        int removeIdx = map.remove(val);
        int listLastVal = list.remove(list.size()-1);
        if(listLastVal != val){
            list.set(removeIdx,listLastVal);
            map.put(listLastVal,removeIdx);
        }
        return true;
    }

    /** Get a random element from the set. */
    public int getRandom() {
        return list.get(rnd.nextInt(list.size()));
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */

